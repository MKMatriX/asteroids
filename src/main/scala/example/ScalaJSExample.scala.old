package example
import scala.scalajs.js.annotation.JSExport
import scala.scalajs.js.Math
import org.scalajs.dom
import org.scalajs.dom.html
import scala.util.Random

case class Point(x: Int, y: Int){
  def +(p: Point) = Point(x + p.x, y + p.y)
  def /(d: Int) = Point(x / d, y / d)
}

@JSExport
object ScalaJSExample {
  @JSExport
  def main(canvas: html.Canvas): Unit = {
    val ctx = canvas.getContext("2d")
                    .asInstanceOf[dom.CanvasRenderingContext2D]

    var count = 0
    var p = Point(0, 0)
    var l = 0
    var a = 0
    //val corners = Seq(Point(255, 255), Point(0, 255), Point(128, 0))

    def clear() = {
      ctx.fillStyle = "black"
      ctx.fillRect(0, 0, 800, 800)
    }

    var down = false
    canvas.onmousedown = (e: dom.MouseEvent) => down = true

    canvas.onmouseup = (e: dom.MouseEvent) => down = false

    canvas.onmousemove = {
      (e: dom.MouseEvent) =>
        ctx.fillStyle = "red"
        val rect = canvas.getBoundingClientRect()
        if (down) ctx.fillRect(
          e.clientX - rect.left,
          e.clientY - rect.top,
          10, 10
        )
        ctx.fillStyle = "black"
    }

    def run = for (i <- 0 until 10){
      if (count % 9000 == 0) clear()
      count += 1
      //p = (p + corners(Random.nextInt(3))) / 2
      l = Random.nextInt(200)+20
      a = Random.nextInt(360)

      p = Point((400+Math.sin(a)*l).toInt,(400+Math.cos(a)*l).toInt)

      val r = (Math.sin(a % 180)*(l*255/220.0)).toInt
      val g = (Math.sin((a +120)% 180 )*(l*255/220.0)).toInt
      val b = (Math.sin((a +60)% 180 )*(l*255/220.0)).toInt
      //println(s"a = $a l = $l   $r $g $b");
      ctx.fillStyle = s"rgb($g, $r, $b)"

      ctx.fillRect(p.x, p.y, 1, 1)
    }

    dom.window.setInterval(() => run, 50)
  }
}
